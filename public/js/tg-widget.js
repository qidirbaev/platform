(function (window) { (function (window) { window.__parseFunction = function (__func, __attrs) { return __attrs = __attrs || [], __func = "(function(" + __attrs.join(",") + "){" + __func + "})", window.execScript ? window.execScript(__func) : eval(__func) } })(window), function (e) { function t(e, t, r) { for (var n = t.split(/\s+/), a = 0; a < n.length; a++)e.addEventListener ? e.addEventListener(n[a], r) : e.attachEvent("on" + n[a], r) } function r(e, t, r) { for (var n = t.split(/\s+/), a = 0; a < n.length; a++)e.removeEventListener ? e.removeEventListener(n[a], r) : e.detachEvent("on" + n[a], r) } function n(t, r) { return e.getComputedStyle ? e.getComputedStyle(t, "").getPropertyValue(r) || null : t.currentStyle && t.currentStyle[r] || null } function a(e) { return "string" == typeof e || e instanceof String ? document.getElementById(e) : e instanceof HTMLElement ? e : null } var o = function (e, t) { var r, n = document.createElement("A"); return n.href = document.currentScript && document.currentScript.src || e, "https://telegram.org" == (r = n.origin || n.protocol + "//" + n.hostname) ? r = e : "https://telegram-js.azureedge.net" != r && "https://tg.dev" != r || (r = t), r }; function i() { var t, r = "", n = /[#\?\&]tgAuthResult=([A-Za-z0-9\-_=]*)$/; try { if (t = (r = location.hash.toString()).match(n)) { location.hash = r.replace(n, ""); var a = t[1] || "", o = (a = a.replace(/-/g, "+").replace(/_/g, "/")).length % 4; return o > 1 && (a += new Array(5 - o).join("=")), JSON.parse(e.atob(a)) } } catch (e) { } return !1 } function l(t, r, n, a) { if (!t._ready) return t._readyQueue || (t._readyQueue = []), void t._readyQueue.push([r, n, a]); try { (n = n || {}).event = r, a && (n._cb = ++e.Telegram.__WidgetLastId, e.Telegram.__WidgetCallbacks[n._cb] = { iframe: t, callback: a }), t.contentWindow.postMessage(JSON.stringify(n), "*") } catch (e) { } } function u(a) { var u, c, s, d, g, p, m, h, f, _, v = {}, b = [], w = !1; if (!a.tagName || !("SCRIPT" == a.tagName.toUpperCase() || "BLOCKQUOTE" == a.tagName.toUpperCase() && a.classList.contains("telegram-post"))) return null; if (a._iframe) return a._iframe; if (u = a.getAttribute("data-telegram-post")) { var y = a.getAttribute("data-comment") || ""; s = o("https://t.me", "https://post.tg.dev"), c = "telegram-post-" + u.replace(/[^a-z0-9_]/gi, "-") + (y ? "-comment" + y : ""), g = s + "/" + u + "?embed=1", b = ["comment", "userpic", "mode", "single?", "color", "dark", "dark_color"], p = a.getAttribute("data-width") || "100%", m = "", v.minWidth = "320px" } else if (u = a.getAttribute("data-telegram-discussion")) { s = o("https://t.me", "https://post.tg.dev"), c = "telegram-discussion-" + u.replace(/[^a-z0-9_]/gi, "-") + "-" + ++e.Telegram.__WidgetUuid; var A = a.getAttribute("data-page-url"); A || (A = function () { var e, t, r = document.createElement("A"); if (document.querySelector) { if ((e = document.querySelector('link[rel="canonical"]')) && (t = e.getAttribute("href"))) return r.href = t, r.href } else for (var n = document.getElementsByTagName("LINK"), a = 0; a < n.length; a++)if ((e = n[a]) && "canonical" == e.getAttribute("rel") && (t = e.getAttribute("href"))) return r.href = t, r.href; return !1 }()), g = s + "/" + u + "?embed=1&discussion=1" + (A ? "&page_url=" + encodeURIComponent(A) : ""), b = ["comments_limit", "color", "colorful", "dark", "dark_color", "width", "height"], p = a.getAttribute("data-width") || "100%", m = a.getAttribute("data-height") || 0, v.minWidth = "320px", m > 0 && (w = !0) } else if (a.hasAttribute("data-telegram-login")) { if (u = a.getAttribute("data-telegram-login"), s = o("https://oauth.telegram.org", "https://oauth.tg.dev"), c = "telegram-login-" + u.replace(/[^a-z0-9_]/gi, "-"), g = s + "/embed/" + u + "?origin=" + encodeURIComponent(location.origin || location.protocol + "//" + location.hostname) + "&return_to=" + encodeURIComponent(location.href), b = ["size", "userpic", "init_auth", "request_access", "radius", "min_width", "max_width", "lang"], p = 186, m = 28, a.hasAttribute("data-size")) { var T = a.getAttribute("data-size"); "small" == T ? (p = 148, m = 20) : "large" == T && (p = 238, m = 40) } if (a.hasAttribute("data-onauth")) h = f = __parseFunction(a.getAttribute("data-onauth"), ["user"]); else if (a.hasAttribute("data-auth-url")) { var C = document.createElement("A"); C.href = a.getAttribute("data-auth-url"), f = function (e) { var t = C.href; t += t.indexOf("?") >= 0 ? "&" : "?"; var r = []; for (var n in e) r.push(n + "=" + encodeURIComponent(e[n])); t += r.join("&"), location.href = t } } a.hasAttribute("data-onunauth") && (_ = __parseFunction(a.getAttribute("data-onunauth"))); var E = i(); E && f && f(E) } else { if (!(u = a.getAttribute("data-telegram-share-url"))) return null; s = o("https://t.me", "https://post.tg.dev"), c = "telegram-share-" + e.btoa(u), g = s + "/share/embed?origin=" + encodeURIComponent(location.origin || location.protocol + "//" + location.hostname), b = ["telegram-share-url", "comment", "size", "text"], p = 60, m = 20, "large" == a.getAttribute("data-size") && (p = 76, m = 28) } if (d = document.getElementById(c)) return d; for (var I = 0; I < b.length; I++) { var R = b[I], S = "?" == R.substr(-1); S && (R = R.slice(0, -1)); var U = "data-" + R.replace(/_/g, "-"); if (a.hasAttribute(U)) g += "&" + R + "=" + (S ? "1" : encodeURIComponent(a.getAttribute(U))) } function W(t) { var r = document.documentElement, n = t.getBoundingClientRect(); return { frameTop: n.top, frameBottom: n.bottom, frameLeft: n.left, frameRight: n.right, frameWidth: n.width, frameHeight: n.height, scrollTop: e.pageYOffset, scrollLeft: e.pageXOffset, clientWidth: r.clientWidth, clientHeight: r.clientHeight } } function L() { (function (t, r) { var a = t; if ("hidden" == n(a, "visibility")) return !1; for (; a && a !== document.documentElement;) { if ("none" == n(a, "display")) return !1; var o = n(a, "opacity"); if (null !== o && o < .1) return !1; a = a.parentNode } if (t.getBoundingClientRect) { r = +r || 0; var i = t.getBoundingClientRect(), l = document.documentElement; if (i.bottom < r || i.right < r || i.top > (e.innerHeight || l.clientHeight) - r || i.left > (e.innerWidth || l.clientWidth) - r) return !1 } return !0 })(k, 50) && l(k, "visible", { frame: c }) } function N() { l(k, "focus", { has_focus: document.hasFocus() }) } var k = document.createElement("iframe"); for (var O in k.id = c, k.src = g, k.width = p, k.height = m, k.setAttribute("frameborder", "0"), w || (k.setAttribute("scrolling", "no"), k.style.overflow = "hidden"), k.style.colorScheme = "light dark", k.style.border = "none", v) k.style[O] = v[O]; return a.parentNode && (a.parentNode.insertBefore(k, a), "BLOCKQUOTE" == a.tagName.toUpperCase() && a.parentNode.removeChild(a)), k._ready = !1, k._readyQueue = [], a._iframe = k, t(k, "load", (function () { r(k, "load", L), t(e, "scroll", L), t(e, "resize", L), L() })), t(e, "focus blur", N), t(e, "message", (function (t) { if (t.source === k.contentWindow && t.origin == s) { try { var n = JSON.parse(t.data) } catch (e) { n = {} } if ("resize" == n.event) n.height && (k.style.height = n.height + "px"), n.width && (k.style.width = n.width + "px"); else if ("ready" == n.event) { k._ready = !0, N(); for (var a = 0; a < k._readyQueue.length; a++) { var o = k._readyQueue[a]; l(k, o[0], o[1], o[2]) } k._readyQueue = [] } else if ("visible_off" == n.event) r(e, "scroll", L), r(e, "resize", L); else if ("get_coords" == n.event) l(k, "callback", { _cb: n._cb, value: W(k) }); else if ("scroll_to" == n.event) try { e.scrollTo(n.x || 0, n.y || 0) } catch (e) { } else if ("auth_user" == n.event) n.init ? h && h(n.auth_data) : f && f(n.auth_data); else if ("unauthorized" == n.event) _ && _(); else if ("callback" == n.event) { var i = null; (i = e.Telegram.__WidgetCallbacks[n._cb]) ? i.iframe === k && (i.callback(n.value), delete e.Telegram.__WidgetCallbacks[n._cb]) : console.warn("Callback #" + n._cb + " not found") } } })), k } function c() { return document.querySelectorAll ? document.querySelectorAll("script[data-telegram-post],blockquote.telegram-post,script[data-telegram-discussion],script[data-telegram-login],script[data-telegram-share-url]") : Array.prototype.slice.apply(document.getElementsByTagName("SCRIPT")).concat(Array.prototype.slice.apply(document.getElementsByTagName("BLOCKQUOTE"))) } if (e.Telegram || (e.Telegram = {}), e.Telegram.__WidgetUuid || (e.Telegram.__WidgetUuid = 0), e.Telegram.__WidgetLastId || (e.Telegram.__WidgetLastId = 0), e.Telegram.__WidgetCallbacks || (e.Telegram.__WidgetCallbacks = {}), !document.currentScript || !u(document.currentScript)) for (var s = c(), d = 0; d < s.length; d++)u(s[d]); var g = { popups: {}, options: null, auth_callback: null, _init: function (e, t) { g.options = e, g.auth_callback = t; var r = i(); r && t && t(r) }, _open: function (e) { g._auth(g.options, (function (t) { g.auth_callback && g.auth_callback(t), e && e(t) })) }, _auth: function (n, a) { var o = parseInt(n.bot_id); if (!o) throw new Error("Bot id required"); var i = Math.max(0, (screen.width - 550) / 2) + (0 | screen.availLeft), l = Math.max(0, (screen.height - 470) / 2) + (0 | screen.availTop), u = function (e) { try { var t = JSON.parse(e.data) } catch (e) { t = {} } g.popups[o] && e.source === g.popups[o].window && "auth_result" == t.event && c(t.result) }, c = function (t) { g.popups[o] && (g.popups[o].authFinished || (a && a(t), g.popups[o].authFinished = !0, r(e, "message", u))) }, s = function (e) { if (g.popups[e]) return !g.popups[e].window || g.popups[e].window.closed ? g.getAuthData(n, (function (e, t) { c(t) })) : void setTimeout(s, 100, e) }, d = Telegram.Login.widgetsOrigin + "/auth?bot_id=" + encodeURIComponent(n.bot_id) + "&origin=" + encodeURIComponent(location.origin || location.protocol + "//" + location.hostname) + (n.request_access ? "&request_access=" + encodeURIComponent(n.request_access) : "") + (n.lang ? "&lang=" + encodeURIComponent(n.lang) : "") + "&return_to=" + encodeURIComponent(location.href), p = e.open(d, "telegram_oauth_bot" + o, "width=550,height=470,left=" + i + ",top=" + l + ",status=0,location=0,menubar=0,toolbar=0"); g.popups[o] = { window: p, authFinished: !1 }, p && (t(e, "message", u), p.focus(), s(o)) }, getAuthData: function (e, t) { if (!parseInt(e.bot_id)) throw new Error("Bot id required"); var r = "Microsoft Internet Explorer" == navigator.appName ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest, n = Telegram.Login.widgetsOrigin + "/auth/get"; r.open("POST", n), r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"), r.setRequestHeader("X-Requested-With", "XMLHttpRequest"), r.onreadystatechange = function () { if (4 == r.readyState) if (void 0 === r.responseBody && r.responseText) { try { var e = JSON.parse(r.responseText) } catch (t) { e = {} } e.user ? t(e.origin, e.user) : t(e.origin, !1) } else t("*", !1) }, r.onerror = function () { t("*", !1) }, r.withCredentials = !0, r.send("bot_id=" + encodeURIComponent(e.bot_id) + (e.lang ? "&lang=" + encodeURIComponent(e.lang) : "")) } }; e.Telegram.getWidgetInfo = function (e, t) { var r = null; (el = a(e)) && (el.tagName && "IFRAME" == el.tagName.toUpperCase() ? r = el : el._iframe && (r = el._iframe), r && t && l(r, "get_info", {}, t)) }, e.Telegram.setWidgetOptions = function (e, t) { var r = null; if (void 0 === t) for (var n = c(), o = 0; o < n.length; o++)(r = n[o]._iframe) && l(r, "set_options", { options: e }); else (el = a(t)) && (el.tagName && "IFRAME" == el.tagName.toUpperCase() ? r = el : el._iframe && (r = el._iframe), r && l(r, "set_options", { options: e })) }, e.Telegram.Login = { init: g._init, open: g._open, auth: g._auth, widgetsOrigin: o("https://oauth.telegram.org", "https://oauth.tg.dev") } }(window) })(window);